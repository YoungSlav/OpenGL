#version 430

layout(local_size_x = 256) in;

struct Particle
{
    vec2 Position;
    vec2 PredictedPosition;
    vec2 Velocity;
    float Density;
    float iDensity;
    float NearDensity;
    float iNearDensity;
};
struct SortedParticle
{
    uint CellIndex;
    uint pIndex;
};

// BUFFERS
layout(std430, binding = 0) buffer ParticlesBuffer
{
	Particle Particles[];
};
layout(std430, binding = 1) buffer SortedParticlesBuffer
{
	SortedParticle SortedParticles[];
};
layout(std430, binding = 2) buffer StartIndicesBuffer
{
	uint StartIndices[];
};

// world params
uniform vec2 WorldSize;
uniform vec2 ContainerSize;
uniform float MaxVelocity;
uniform vec2 RandomVector;
uniform uint ParticleCount;

// particle params
uniform float ParticleMass;
uniform float ParticleRadius;
uniform float SmoothingRadius;
uniform float TargetDensity;
uniform float SimulationTimeStep;

// force params
uniform float Preassure;
uniform float NearPreassure;
uniform float ViscosityFactor;
uniform float CollisionDamping;

// kernel scales
uniform float DensityScale;
uniform float NearDensityScale;
uniform float PressureScale;
uniform float NearPressureScale;
uniform float ViscosityScale;

// external forces
uniform float GravityForce;
uniform float InteractionForce;
uniform vec2 InteractionLocation;
uniform float InteractionRadius;





// forces
void CalcDensity(uint i);
vec2 CalcFluidForces(uint i);

// conversion helpers
float DensityToPressure(float density);
float NearDensityToPressure(float density);

// kernels
float DensityKernel(float dst);
float NearDensityKernel(float dst);
float PressureKernel(float dst);
float NearPressureKernel(float dst);
float ViscosityKernel(float dst);

// grid helpers
ivec2 GetCellCoord(vec2 Position);
uint GetCellHash(ivec2 Coords);
uint CellIndexFromHash(uint Hash);

// extrenal forces
vec2 CalcExternalForces(uint i);
void ResolveCollisions(vec2 OldPosition, inout vec2 Position, inout vec2 Velocity);


const uint GridLookupCount = 9;
const ivec2 GridOffsets[GridLookupCount] = ivec2[](
    ivec2(0, 0),
	ivec2(1, 0),
	ivec2(-1, 0),
	ivec2(0, 1),
	ivec2(0, -1),
	ivec2(1, 1),
	ivec2(1, -1),
	ivec2(-1, 1),
	ivec2(-1, -1)
);

void main()
{
    uint i = gl_GlobalInvocationID.x;
    if ( i >= ParticleCount ) return;

    CalcDensity(i);

    barrier();

    vec2 externalForces = CalcExternalForces(i);

    vec2 fluidForces = CalcFluidForces(i);

    vec2 newVelocity = Particles[i].Velocity + ((fluidForces + externalForces) * SimulationTimeStep);
    vec2 newPosition = Particles[i].Position + (newVelocity * SimulationTimeStep);

    ResolveCollisions(Particles[i].Position, newPosition, newVelocity);

    Particles[i].Position = newPosition;
    

    barrier();

    Particles[i].Velocity = newVelocity;

    const float PredictionTimeStep = 1.0f / 120.0f;
    Particles[i].PredictedPosition = newPosition + newVelocity * PredictionTimeStep;
};



void CalcDensity(uint i)
{
    float Density = 0.0f;
    float NearDensity = 0.0f;

    vec2 myPosition = Particles[i].PredictedPosition;
    ivec2 myCell = GetCellCoord(myPosition);
    for ( uint gr = 0; gr < GridLookupCount; ++gr )
    {
        ivec2 lookupCell = myCell + GridOffsets[gr];
        uint CellHash = GetCellHash(lookupCell);
        uint CellIndex = CellIndexFromHash(CellHash);
        for ( uint lookupIndex = StartIndices[CellIndex]; lookupIndex < ParticleCount; ++lookupIndex )
        {
            if ( SortedParticles[lookupIndex].CellIndex != CellIndex )
                break;
            uint otherP = SortedParticles[lookupIndex].pIndex;

            // now we got all the indices
            vec2 otherPosition = Particles[otherP].PredictedPosition;
            vec2 offset = otherPosition - myPosition;
            float dst2 = dot(offset, offset);
            if ( dst2 > SmoothingRadius*SmoothingRadius ) continue;
            
            // now we have all the data
            float dst = sqrt(dst2);
            Density += ParticleMass * DensityKernel(dst);
            NearDensity += ParticleMass * NearDensityKernel(dst);
        }
    }
    Particles[i].Density = Density;
    Particles[i].iDensity = 1.0f / Density;

    Particles[i].NearDensity = NearDensity;
    Particles[i].iNearDensity = 1.0f / NearDensity;
}

vec2 CalcFluidForces(uint i)
{
    vec2 viscosityForce = vec2(0.0f);
    vec2 pressureForce = vec2(0.0f);
    
    vec2 myVelocity = Particles[i].Velocity;
    float myDensity = Particles[i].Density;
    float myDensityInverse = Particles[i].iDensity;
    float myNearDensityInverse = Particles[i].iNearDensity;
    float myNearDensity = Particles[i].NearDensity;
    float myPressure = DensityToPressure(myDensity);
    float myNearPressure = NearDensityToPressure(myNearDensity);

    vec2 myPosition = Particles[i].PredictedPosition;
    ivec2 myCell = GetCellCoord(myPosition);
    for ( uint gr = 0; gr < GridLookupCount; ++gr )
    {
        ivec2 lookupCell = myCell + GridOffsets[gr];
        uint CellHash = GetCellHash(lookupCell);
        uint CellIndex = CellIndexFromHash(CellHash);
        for ( uint lookupIndex = StartIndices[CellIndex]; lookupIndex < ParticleCount; ++lookupIndex )
        {
            if ( SortedParticles[lookupIndex].CellIndex != CellIndex )
                break;
            uint otherP = SortedParticles[lookupIndex].pIndex;
            if ( otherP == i ) continue;

            // now we got all the indices

            vec2 otherPosition = Particles[otherP].PredictedPosition;
            vec2 offset = myPosition - otherPosition;
            float dst2 = dot(offset,  offset);
            if ( dst2 > SmoothingRadius*SmoothingRadius ) continue;
            
            float dst = sqrt(dst2);
            
            // now we have all the data
            
            vec2 dir = dst > 0.0f ? offset / dst : RandomVector;
            
            
            float otherDensity = Particles[otherP].Density;
            float otherNearDensity = Particles[otherP].NearDensity;
            
            float otherPressure = DensityToPressure(otherDensity);
            float otherNearPressure = NearDensityToPressure(otherNearDensity);

            float otherDensityInverse = Particles[otherP].iDensity;
            float otherNearDensityInverse = Particles[otherP].iNearDensity;

            float sharedPressure = (myPressure + otherPressure) * 0.5f;
            float sharedNearPressure = (myNearPressure + otherNearPressure) * 0.5f;
            
            pressureForce += dir * PressureKernel(dst) * sharedPressure * otherDensityInverse;
            pressureForce += dir * NearPressureKernel(dst) * sharedNearPressure * otherNearDensityInverse;
            
            vec2 otherVelocity = Particles[otherP].Velocity;
            viscosityForce += (otherVelocity - myVelocity) * ParticleMass * otherDensityInverse * ViscosityKernel(dst);
        }
    }
    return (viscosityForce * ViscosityFactor) + (pressureForce * myDensityInverse);
}

vec2 CalcExternalForces(uint i)
{
    vec2 externalForces = vec2(0.0f, GravityForce);
    if ( InteractionForce != 0.0f )
    {
        vec2 offset = InteractionLocation - Particles[i].Position;
        float dst = length(offset);
        if ( dst < InteractionRadius )
        {
            float normilizeDist = 1.0f - (dst / InteractionRadius);
            vec2 forceDirection = offset / dst;
            float gravityWeight = 1 - (normilizeDist * clamp(InteractionForce / 10.0f, 0.0f, 1.0f));
            
            vec2 acceleration =
                externalForces * gravityWeight +
                forceDirection * normilizeDist * InteractionForce -
                Particles[i].Velocity * normilizeDist;

            return acceleration;
        }
    }
    return externalForces;
}

void ResolveCollisions(vec2 OldPosition, inout vec2 Position, inout vec2 Velocity)
{
    vec2 Bounds = ContainerSize - vec2(ParticleRadius);
    vec2 collisionPoint = Position;
    vec2 collisionNormal = vec2(0.0); // Normal vector for collision

    // Check for collisions and compute the collision normal
    if (abs(collisionPoint.x) > Bounds.x)
    {
        collisionPoint.x = Bounds.x * sign(collisionPoint.x);
        collisionNormal.x = -sign(collisionPoint.x); // Normal is perpendicular to the X wall
    }
    if (abs(collisionPoint.y) > Bounds.y)
    {
        collisionPoint.y = Bounds.y * sign(collisionPoint.y);
        collisionNormal.y = -sign(collisionPoint.y); // Normal is perpendicular to the Y wall
    }

    // If a collision happened
    if (collisionNormal != vec2(0.0))
    {
        // Reflect velocity using the collision normal
        Velocity = Velocity - 2.0 * dot(Velocity, collisionNormal) * collisionNormal;
        // Apply damping to the velocity
        Velocity *= CollisionDamping;

        const vec2 originalOffset = (Position - OldPosition);
        const float originalMotion2 = dot(originalOffset, originalOffset);


        const vec2 actualOffset = (collisionPoint - OldPosition);
        const float actualMotion2 = dot(actualOffset, actualOffset);

        const float coveredDt2 = actualMotion2 / originalMotion2;
        const float leftDt = 1.0f - sqrt(coveredDt2);

        Position = collisionPoint + Velocity * SimulationTimeStep * leftDt2;
    }
}

//// HELPERS

float DensityKernel(float dst)
{
    float v = SmoothingRadius - dst;
	return v * v * DensityScale;
}
float NearDensityKernel(float dst)
{
    float v = SmoothingRadius - dst;
	return v * v * v * NearDensityScale;
}

float PressureKernel(float dst)
{
    float v = SmoothingRadius - dst;
	return v * PressureScale;
}
float NearPressureKernel(float dst)
{
    float v = SmoothingRadius - dst;
	return v * v * NearPressureScale;
}
float ViscosityKernel(float dst)
{
    float v = SmoothingRadius * SmoothingRadius - dst * dst;
	return v * v * v * ViscosityScale;
}
float DensityToPressure(float density)
{
    return (density - TargetDensity) * Preassure;
}
float NearDensityToPressure(float density)
{
    return density * NearPreassure;
}

// GRID

ivec2 GetCellCoord(vec2 Position)
{
	vec2 normilizedPos = Position + WorldSize;
	int cellX = int(floor(normilizedPos.x / SmoothingRadius*2.0f));
    int cellY = int(floor(normilizedPos.y / SmoothingRadius*2.0f));
	return ivec2(cellX, cellY);
}

uint GetCellHash(ivec2 Coords)
{	
	const uint PRIME1 = 0x9e3779b1;
    const uint PRIME2 = 0x85ebca6b;

	return Coords.y * PRIME1 + Coords.x * PRIME2;
}

uint CellIndexFromHash(uint Hash)
{
    return Hash % ParticleCount;
}