#version 430

layout(local_size_x = 1024) in;

struct Particle
{
    vec2 Position;
    vec2 PredictedPosition;
    vec2 Velocity;
    int Highlight;
    float Density;
    float NearDensity;
};
layout(std430, binding = 0) buffer ParticlesBuffer
{
	Particle Particles[];
};

uniform float SimulationTimeStep;

uniform float GravityForce;
uniform float InteractionForce;
uniform vec2 InteractionLocation;
uniform float InteractionRadius;



vec2 CalcExternalForces(uint i);

void main()
{
    uint i = gl_GlobalInvocationID.x;
    if ( i >= Particles.length() ) return;

    Particles[i].Velocity += CalcExternalForces(i) * SimulationTimeStep;
    Particles[i].PredictedPosition = Particles[i].Position + Particles[i].Velocity * SimulationTimeStep;
};


vec2 CalcExternalForces(uint i)
{
    vec2 gravityAcceleration = vec2(0.0f, GravityForce);
    if ( InteractionForce != 0.0f )
    {
        vec2 offset = InteractionLocation - Particles[i].Position;
        float dst = length(offset);
        if ( dst < InteractionRadius )
        {
            float normilizeDist = 1.0f - (dst / InteractionRadius);
            vec2 forceDirection = offset / dst;
            float gravityWeight = 1 - (normilizeDist * clamp(InteractionForce / 10.0f, 0.0f, 1.0f));
            
            vec2 acceleration =
                gravityAcceleration * gravityWeight +
                forceDirection * normilizeDist * InteractionForce -
                Particles[i].Velocity * normilizeDist;

            return acceleration;
        }
    }
    return gravityAcceleration;
}