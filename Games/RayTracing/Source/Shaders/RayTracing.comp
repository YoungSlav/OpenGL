#version 430

layout (local_size_x = 16, local_size_y = 16) in;

layout(rgba32f, binding = 0) uniform image2D outputTexture;

struct Material
{
    vec3 color;
    float metallic;
    float smoothness;
    float specular;
    
    vec3 lightColor;
    float lightStrength;
};

struct ComponentData
{
	uint Type;    // 0 = sphere, 1 = plane, 2 = box

	mat4 model;
	mat4 modelInverse;

	Material material;
};

// BUFFERS
layout(std430, binding = 5) buffer ComponentsBuffer
{
	ComponentData components[];
};
uniform uint componentsCount;

uniform float antiAliasingStrength;

uniform uint frameNumber;
uniform uint maxBounceCount;
uniform uint raysPerPixel;

uniform samplerCube skybox;

uniform vec3 eyeLocation;
uniform mat4 invProjMat;
uniform mat4 invViewMat;

const float FLT_MAX = 3.402823466e+38;
const float PI = 3.14159265359;


struct Ray
{
    vec3 origin;
    vec3 dir;
};

struct HitInfo
{
    bool bHit;
    float dst2;
    vec3 hitLocation;
    vec3 hitNormal;

    uint componentIndex;
};

float RandomValue(inout uint seed);
float RandomValueNormalDistr(inout uint seed);
vec3 RandomDirection(inout uint seed);
vec3 RandomHemisphereDirection(inout uint seed, vec3 dir);
vec2 RandomCirclePoint(inout uint seed);

vec3 TraceRay(Ray ray, inout uint rndSeed);

void RayCollision(out HitInfo hitInfo, Ray worldRay);
void RayIntersectsSphere(inout HitInfo hitInfo, Ray worldRay, uint cIndex);
void RayIntersectsBox(inout HitInfo hitInfo, Ray worldRay, uint cIndex);
void RayIntersectsPlane(inout HitInfo hitInfo, Ray worldRay, uint cIndex);

void main()
{
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 iSize = imageSize(outputTexture);
    if (pixelCoord.x >= iSize.x || pixelCoord.y >= iSize.y)
    {
        return;  // Ignore out-of-bounds invocations
    }

    
    uint rndSeed = pixelCoord.y * iSize.x + pixelCoord.x;
    rndSeed += frameNumber*511652;

    // Convert pixel coordinates to NDC
    vec2 ndc = vec2(
        (2.0 * pixelCoord.x) / iSize.x - 1.0,
        (2.0 * pixelCoord.y) / iSize.y - 1.0
    );

    vec4 clipCoord = vec4(ndc, -1.0, 1.0);

    vec4 viewCoord = invProjMat * clipCoord;
    viewCoord /= viewCoord.w;

    vec3 worldCoord = (invViewMat * vec4(viewCoord.xyz, 1.0)).xyz;

    vec3 camRight = vec3(invViewMat[0][0], invViewMat[0][1], invViewMat[0][2]);
    vec3 camUp = vec3(invViewMat[1][0], invViewMat[1][1], invViewMat[1][2]);

    vec2 aaJitter = RandomCirclePoint(rndSeed) * antiAliasingStrength / iSize.x;
    vec3 aaOfset = camRight * aaJitter.x + camUp * aaJitter.y;

    worldCoord = worldCoord + aaOfset;
    
    Ray ray;
    ray.origin = eyeLocation;
    ray.dir = normalize(worldCoord - eyeLocation);
    //rndSeed = (rndSeed ^ (rndSeed >> 16)) * 0x45d9f3bfu; // Example hash operation
    //rndSeed = rndSeed ^ (rndSeed >> 16); // Further mix the seed

    
    // Sample the skybox using the world-space ray direction
    vec3 avarageColor = vec3(0.0);
    for ( int i = 0; i < raysPerPixel; ++i )
    {
        avarageColor += TraceRay(ray, rndSeed);
    }
    avarageColor = avarageColor / raysPerPixel;

    // Write the resulting color to the output texture
    vec3 oldColor = imageLoad(outputTexture, pixelCoord).xyz;
    float weight = 1.0 / (frameNumber+1);
    vec3 newColor = oldColor * (1-weight) + avarageColor*weight;
    imageStore(outputTexture, pixelCoord, vec4(newColor, 1.0));
};

vec3 TraceRay(Ray ray, inout uint rndSeed)
{
    vec3 rayColor = vec3(1.0);
    vec3 incommingLight = vec3(0.0);

    for ( int i = 0; i < maxBounceCount; ++i )
    {
        HitInfo hitInfo;
        RayCollision(hitInfo, ray);
        if ( hitInfo.bHit )
        {
            Material material = components[hitInfo.componentIndex].material;


            ray.origin = hitInfo.hitLocation;
            vec3 diffuseDir = normalize(hitInfo.hitNormal + RandomDirection(rndSeed));
            vec3 specularDir = reflect(ray.dir, hitInfo.hitNormal);

            float specular = material.specular >= RandomValue(rndSeed) ? 1.0 : 0.0;

            ray.dir = mix(diffuseDir, specularDir, material.smoothness * specular);

            vec3 emittedLight = material.lightColor * material.lightStrength;
            
            incommingLight += emittedLight * rayColor;

            rayColor = rayColor * mix(material.color, vec3(1.0), specular);
        }
        else
        {
            incommingLight += rayColor * texture(skybox, ray.dir).rgb;
            break;
        }
    }
    return incommingLight;
}

void RayCollision(out HitInfo hitInfo, Ray worldRay)
{
    hitInfo.bHit = false;
    hitInfo.dst2 = FLT_MAX;
    hitInfo.componentIndex = 0;

    for (uint i = 0; i < componentsCount; ++i)
    {
        ComponentData component = components[i];
        HitInfo tmpHitInfo;
        tmpHitInfo.bHit = false;

        if (component.Type == 0) // Sphere
        {
            RayIntersectsSphere(tmpHitInfo, worldRay, i);
        }
        else if ( component.Type == 1 ) // square
        {
            RayIntersectsPlane(tmpHitInfo, worldRay, i);
        }
        else if ( component.Type == 2 ) // box
        {
            RayIntersectsBox(tmpHitInfo, worldRay, i);
        }

        if ( tmpHitInfo.bHit && tmpHitInfo.dst2 < hitInfo.dst2)
        {
            hitInfo = tmpHitInfo;
            hitInfo.componentIndex = i;
        }
    }
}

void RayIntersectsSphere(inout HitInfo hitInfo, Ray worldRay, uint cIndex)
{
    const mat4 model = components[cIndex].model;
    const mat4 modelInverse = components[cIndex].modelInverse;

    Ray localRay;
    localRay.origin = (modelInverse * vec4(worldRay.origin, 1.0)).xyz;
    localRay.dir = normalize((modelInverse * vec4(worldRay.dir, 0.0)).xyz);

    vec3 rayOrigin = localRay.origin - vec3(0.0);
        
    float a = dot(localRay.dir, localRay.dir);
    float b = 2 * dot(rayOrigin, localRay.dir);
    float c = dot(rayOrigin, rayOrigin) - 1.0*1.0;

    float discriminant = b*b - 4*a*c;
    if ( discriminant >= 0.0 )
    {
        //if ( b*b > discriminant )
        {
            float dst = (-b - sqrt(discriminant)) / (2*a);
            if ( dst >= 0.0 )
            {
                hitInfo.bHit = true;

                hitInfo.hitLocation = localRay.origin + localRay.dir * dst;
                hitInfo.hitNormal = hitInfo.hitLocation - vec3(0.0);
            
                // transform back to world space
                hitInfo.hitLocation = (model * vec4(hitInfo.hitLocation, 1.0)).xyz;
                hitInfo.hitNormal = normalize((model * vec4(hitInfo.hitNormal, 0.0)).xyz);
            
                vec3 originToHit = hitInfo.hitLocation - worldRay.origin;
                hitInfo.dst2 = dot(originToHit, originToHit);
            }
        }
    }
}

void RayIntersectsBox(inout HitInfo hitInfo, Ray worldRay, uint cIndex)
{
    const mat4 model = components[cIndex].model;
    const mat4 modelInverse = components[cIndex].modelInverse;

    Ray localRay;
    localRay.origin = (modelInverse * vec4(worldRay.origin, 1.0)).xyz;
    localRay.dir = normalize((modelInverse * vec4(worldRay.dir, 0.0)).xyz);
    
    const vec3 minBounds = vec3(-0.5, -0.5, -0.5);
    const vec3 maxBounds = vec3(0.5, 0.5, 0.5);
    float tMin = -float(FLT_MAX);
    float tMax = float(FLT_MAX);
    int hitAxis = -1;

    for (int i = 0; i < 3; ++i)
    {
        float invDir = 1.0 / localRay.dir[i];
        float t0 = (minBounds[i] - localRay.origin[i]) * invDir;
        float t1 = (maxBounds[i] - localRay.origin[i]) * invDir;

        // Ensure t0 is always the minimum t and t1 is the maximum t
        if (t0 > t1)
        {
            float temp = t0;
            t0 = t1;
            t1 = temp;
        }

        // Update the overall entry and exit t values
        tMin = max(tMin, t0);
        tMax = min(tMax, t1);

        // Track which axis caused the hit (if any)
        if (tMin == t0 || tMin == t1)
        {
            hitAxis = i;
        }

        // If there is no overlap, the ray doesn't intersect the box
        if (tMin > tMax)
        {
            return; // No intersection
        }
    }

    hitInfo.bHit = true;
    hitInfo.hitLocation = localRay.origin + localRay.dir * tMin;
    // Calculate the normal based on the hit axis
    if (hitAxis == 0)
    {
        // Hit on the X face
        hitInfo.hitNormal = (localRay.origin.x < 0.0) ? vec3(-1.0, 0.0, 0.0) : vec3(1.0, 0.0, 0.0);
    }
    else if (hitAxis == 1)
    {
        // Hit on the Y face
        hitInfo.hitNormal = (localRay.origin.y < 0.0) ? vec3(0.0, -1.0, 0.0) : vec3(0.0, 1.0, 0.0);
    }
    else
    {
        // Hit on the Z face
        hitInfo.hitNormal = (localRay.origin.z < 0.0) ? vec3(0.0, 0.0, -1.0) : vec3(0.0, 0.0, 1.0);
    }

    // transform back to world space
    hitInfo.hitLocation = (model * vec4(hitInfo.hitLocation, 1.0)).xyz;
    hitInfo.hitNormal = normalize((model * vec4(hitInfo.hitNormal, 0.0)).xyz);
            
    vec3 originToHit = hitInfo.hitLocation - worldRay.origin;
    hitInfo.dst2 = dot(originToHit, originToHit);

}

void RayIntersectsPlane(inout HitInfo hitInfo, Ray worldRay, uint cIndex)
{
    const mat4 model = components[cIndex].model;
    const mat4 modelInverse = components[cIndex].modelInverse;

    Ray localRay;
    localRay.origin = (modelInverse * vec4(worldRay.origin, 1.0)).xyz;
    localRay.dir = normalize((modelInverse * vec4(worldRay.dir, 0.0)).xyz);

    float dst = -localRay.origin.z / localRay.dir.z;
    if ( dst >= 0.0 )
    {
        vec3 hitPoint = localRay.origin + localRay.dir * dst;
        // Check if the hit point is within the square bounds
        if (abs(hitPoint.x) <= 1.0 && abs(hitPoint.y) <= 1.0)
        {
            hitInfo.bHit = true;

            hitInfo.hitLocation = hitPoint;
            hitInfo.hitNormal = vec3(1.0, 0.0, 0.0);

            // transform back to world space
            hitInfo.hitLocation = (model * vec4(hitInfo.hitLocation, 1.0)).xyz;
            hitInfo.hitNormal = normalize((model * vec4(hitInfo.hitNormal, 0.0)).xyz);
            
            vec3 originToHit = hitInfo.hitLocation - worldRay.origin;
            hitInfo.dst2 = dot(originToHit, originToHit);
        }
    }
}

// TODO: replace me?
float RandomValue(inout uint seed)
{
    seed = seed * 747796405 + 2891336453;
    uint result = ((seed >> ((seed >> 28) + 4)) ^ seed) * 277803737;
    result = (result >> 22) ^ result;
    return result / 4294967295.0;
}

float RandomValueNormalDistr(inout uint seed)
{
    float t = 2.0 * PI * RandomValue(seed);
    float r = sqrt(-2 * log(RandomValue(seed)));
    return r * cos(t);
}

vec3 RandomDirection(inout uint seed)
{
    vec3 result = vec3(0);
    result.x = RandomValueNormalDistr(seed);
    result.y = RandomValueNormalDistr(seed);
    result.z = RandomValueNormalDistr(seed);
    return normalize(result);
}

vec3 RandomHemisphereDirection(inout uint seed, vec3 dir)
{
    vec3 result = RandomDirection(seed);
    return result * sign(dot(result, dir));
}

vec2 RandomCirclePoint(inout uint seed)
{
    float angle = RandomValue(seed) * 2.0 * PI;
    vec2 point = vec2(cos(angle), sin(angle));
    return point * sqrt(RandomValue(seed));
}