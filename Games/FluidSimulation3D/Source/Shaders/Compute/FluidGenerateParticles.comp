#version 430

layout(local_size_x = 256) in;

struct Particle
{
    vec3 Position;
    vec3 PredictedPosition;
    vec3 Velocity;
    float Density;
    float iDensity;
};
layout(std430, binding = 0) buffer ParticlesBuffer
{
	Particle Particles[];
};

uniform int ParticleCount;
uniform mat4 BoundingBox;
uniform float Offset;


void main()
{
    uint i = gl_GlobalInvocationID.x;
    if (i >= ParticleCount) return;

    vec3 origin = BoundingBox[3].xyz;
    vec3 scale = vec3(
        length(BoundingBox[0].xyz),  // Scale along the X-axis
        length(BoundingBox[1].xyz),  // Scale along the Y-axis
        length(BoundingBox[2].xyz)   // Scale along the Z-axis
    );

    uvec3 gridDimensions = uvec3(scale / Offset);
    
    // Adjust the grid calculation to fully fill the smallest dimension
    // Fully distribute along the Z-axis
    uint z = i % gridDimensions.z;
    uint x = (i / gridDimensions.z) % gridDimensions.x;
    uint y = i / (gridDimensions.z * gridDimensions.x);

    
    vec3 localPos = vec3(x, y, z) * Offset - (scale * 0.5);
    vec3 worldPos = origin + localPos - origin;

    Particles[i].Position = worldPos;



    //// Generate random positions within [0, 1] range
    //float randX = fract(sin(float(i) * 12.9898) * 43758.5453); // Simple random function
    //float randY = fract(sin(float(i) * 78.233) * 43758.5453);
    //float randZ = fract(sin(float(i) * 45.236) * 43758.5453);
    //
    //// Map the random values to the bounding box's scale
    //vec3 randomPosition = vec3(-0.5) + vec3(randX, randY, randZ);
    //
    //// Apply the BoundingBox transformation (including scale, rotation, and translation)
    //Particles[i].Position = vec3(BoundingBox * vec4(randomPosition, 1.0));
    Particles[i].PredictedPosition = Particles[i].Position;
    Particles[i].Velocity = vec3(0.0);
    Particles[i].Density = 0.0;
};