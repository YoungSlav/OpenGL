#version 430

layout(local_size_x = 1024) in;

struct Particle
{
    vec3 Position;
    vec3 PredictedPosition;
    vec3 Velocity;
    float Density;
};
layout(std430, binding = 0) buffer ParticlesBuffer
{
	Particle Particles[];
};

uniform int ParticleCount;
uniform mat4 BoundingBox;


void main()
{
    uint i = gl_GlobalInvocationID.x;
    if (i >= ParticleCount) return;

    // Generate random positions within [0, 1] range
    float randX = fract(sin(float(i) * 12.9898) * 43758.5453); // Simple random function
    float randY = fract(sin(float(i) * 78.233) * 43758.5453);
    float randZ = fract(sin(float(i) * 45.236) * 43758.5453);

    // Map the random values to the bounding box's scale
    vec3 randomPosition = vec3(-0.5) + vec3(randX, randY, randZ);

    // Apply the BoundingBox transformation (including scale, rotation, and translation)
    Particles[i].Position = vec3(BoundingBox * vec4(randomPosition, 1.0));
};