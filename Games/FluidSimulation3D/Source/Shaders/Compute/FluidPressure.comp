#version 430

layout(local_size_x = 256) in;

struct Particle
{
    vec3 Position;
    vec3 PredictedPosition;
    vec3 Velocity;
};
layout(std430, binding = 0) buffer ParticlesBuffer
{
	Particle Particles[];
};
layout(std430, binding = 5) buffer SortedParticlesBuffer
{
	Particle SortedParticles[];
};

struct Density
{
    float Density;
    float iDensity;
    float NearDensity;
    float iNearDensity;
};
layout(std430, binding = 6) buffer DensitiesBuffer
{
	Density Densities[];
};


struct SortedCellIndex
{
    uint CellIndex;
    uint pIndex;
};
layout(std430, binding = 1) buffer SortedCellIndiciesBuffer
{
	SortedCellIndex SortedCellIndicies[];
};
layout(std430, binding = 2) buffer StartIndicesBuffer
{
	uint StartIndices[];
};

uniform int ParticleCount;

// world params
uniform vec3 WorldSize;
uniform mat4 BoundingBoxModel;
uniform mat4 InverseBoundingBoxModel;
uniform vec3 RandomVector;

uniform float GravityForce;

// particle params
uniform float ParticleMass;
uniform float SmoothingRadius;
uniform float SmoothingRadius2;
uniform float TargetDensity;
uniform float SimulationTimeStep;

// force params
uniform float PressureFactor;
uniform float NearPressureFactor;
uniform float ViscosityFactor;
uniform float CollisionDamping;

// kernel scales
uniform float PressureScale;
uniform float NearPressureScale;
uniform float ViscosityScale;



// forces
vec3 CalcFluidForces(uint i);
void ResolveCollisions(vec3 oldPosition, inout vec3 Position, inout vec3 Velocity);

// conversion helpers
float DensityToPressure(float density);
float NearDensityToPressure(float density);

// kernels
float PressureKernel(float dst);
float NearPressureKernel(float dst);
float ViscosityKernel(float dst);

// grid helpers
uint GetCellIndex(vec3 Position);
ivec3 GetCellCoord(vec3 Position);
uint GetCellHash(ivec3 Coords);
uint CellIndexFromHash(uint Hash);


const uint GridLookupCount = 27;
const ivec3 GridOffsets[GridLookupCount] = ivec3[](
    ivec3(0, 0, 0),
    ivec3(1, 0, 0),
    ivec3(-1, 0, 0),
    ivec3(0, 1, 0),
    ivec3(0, -1, 0),
    ivec3(0, 0, 1),
    ivec3(0, 0, -1),
    ivec3(1, 1, 0),
    ivec3(1, -1, 0),
    ivec3(-1, 1, 0),
    ivec3(-1, -1, 0),
    ivec3(1, 0, 1),
    ivec3(1, 0, -1),
    ivec3(-1, 0, 1),
    ivec3(-1, 0, -1),
    ivec3(0, 1, 1),
    ivec3(0, 1, -1),
    ivec3(0, -1, 1),
    ivec3(0, -1, -1),
    ivec3(1, 1, 1),
    ivec3(1, 1, -1),
    ivec3(1, -1, 1),
    ivec3(1, -1, -1),
    ivec3(-1, 1, 1),
    ivec3(-1, 1, -1),
    ivec3(-1, -1, 1),
    ivec3(-1, -1, -1)
);
const float PredictionTimeStep = 1.0f / 120.0f;

void main()
{
    uint i = gl_GlobalInvocationID.x;
    if ( i >= ParticleCount ) return;

    const vec3 gravifyForce = vec3(0.0, -GravityForce, 0.0);
    
    vec3 fluidForces = CalcFluidForces(i);

    vec3 newVelocity = SortedParticles[i].Velocity + (fluidForces + gravifyForce)* SimulationTimeStep;
    vec3 oldPosition = SortedParticles[i].Position;
    vec3 newPosition = oldPosition + newVelocity * SimulationTimeStep;

    ResolveCollisions(oldPosition, newPosition, newVelocity);


    Particles[i].Position = newPosition;
    Particles[i].Velocity = newVelocity;
    Particles[i].PredictedPosition = newPosition + newVelocity * PredictionTimeStep;
};

vec3 CalcFluidForces(uint i)
{
    vec3 viscosityForce = vec3(0.0f);
    vec3 pressureForce = vec3(0.0f);
    
    vec3 myVelocity = SortedParticles[i].Velocity;
    float myDensity = Densities[i].Density;
    float myDensityInverse = Densities[i].iDensity;
    float myNearDensity = Densities[i].NearDensity;
    float myNearDensityInverse = Densities[i].iNearDensity;
    float myPressure = DensityToPressure(myDensity);
    float myNearPressure = NearDensityToPressure(myNearDensity);

    vec3 myPosition = SortedParticles[i].PredictedPosition;
    ivec3 myCell = GetCellCoord(myPosition);
    for ( uint gr = 0; gr < GridLookupCount; ++gr )
    {
        ivec3 lookupCell = myCell + GridOffsets[gr];
        uint CellHash = GetCellHash(lookupCell);
        uint CellIndex = CellIndexFromHash(CellHash);
        for ( uint otherP = StartIndices[CellIndex]; otherP < ParticleCount; ++otherP )
        {
            if ( otherP == i ) continue;
            if ( SortedCellIndicies[otherP].CellIndex != CellIndex )
                break;

            // now we got all the indices

            vec3 otherPosition = SortedParticles[otherP].PredictedPosition;
            vec3 offset = myPosition - otherPosition;
            float dst2 = dot(offset,  offset);
            if ( dst2 > SmoothingRadius2 ) continue;
            
            // now we have all the data
            
            float dst = sqrt(dst2);
            vec3 dir = dst > 0.0f ? offset / dst : RandomVector;
            
            float otherDensity = Densities[otherP].Density;
            float otherNearDensity = Densities[otherP].NearDensity;
            
            float otherPressure = DensityToPressure(otherDensity);
            float otherNearPressure = NearDensityToPressure(otherNearDensity);

            float otherDensityInverse = Densities[otherP].iDensity;
            float otherNearDensityInverse = Densities[otherP].iNearDensity;

            float sharedPressure = (myPressure + otherPressure) * 0.5f;
            float sharedNearPressure = (myNearPressure + otherNearPressure) * 0.5f;
            
            pressureForce += dir * PressureKernel(dst) * sharedPressure * otherDensityInverse;
            pressureForce += dir * NearPressureKernel(dst) * sharedNearPressure * otherNearDensityInverse;
            
            vec3 otherVelocity = SortedParticles[otherP].Velocity;
            viscosityForce += (otherVelocity - myVelocity) * /*ParticleMass * otherDensityInverse **/ ViscosityKernel(dst);
        }
    }
    return (viscosityForce * ViscosityFactor) + (pressureForce * myDensityInverse);
}

void ResolveCollisions(vec3 OldPosition, inout vec3 Position, inout vec3 Velocity)
{
    vec4 localPoint = InverseBoundingBoxModel * vec4(Position, 1.0);
    vec4 localVelocity = InverseBoundingBoxModel * vec4(Velocity, 0.0);

    const vec3 bottomLeft = vec3(-0.5f);
    const vec3 topRight = vec3(0.5f);

    vec3 s = step(bottomLeft, localPoint.xyz) - step(topRight, localPoint.xyz);
    bool bOutside = s.x * s.y * s.z < 0.1f;

    if ( bOutside )
    {
        localPoint.xyz = clamp(localPoint.xyz, bottomLeft, topRight);
        vec3 worldCollisionPoint = (BoundingBoxModel * localPoint).xyz;
        

        vec3 localCollisionNormal = step(topRight, localPoint.xyz) - step(localPoint.xyz, bottomLeft);
        
        vec3 worldNormal = normalize(vec3(BoundingBoxModel * vec4(localCollisionNormal, 0.0f)));
        vec3 reflectedVelocity = Velocity - (1.0f + CollisionDamping) * dot(Velocity, worldNormal) * worldNormal;
        
        Velocity = reflectedVelocity;

        const vec3 originalOffset = (Position - OldPosition);
        const float originalMotion2 = dot(originalOffset, originalOffset);


        const vec3 actualOffset = (worldCollisionPoint - OldPosition);
        const float actualMotion2 = dot(actualOffset, actualOffset);

        const float coveredDt2 = actualMotion2 / originalMotion2;
        const float leftDt = 1.0f - sqrt(coveredDt2);
        
        Position = worldCollisionPoint + Velocity * SimulationTimeStep * leftDt;
    }
}

//// HELPERS
float PressureKernel(float dst)
{
    float v = SmoothingRadius - dst;
	return v * PressureScale;
}
float NearPressureKernel(float dst)
{
    float v = SmoothingRadius - dst;
	return v * v * NearPressureScale;
}
float ViscosityKernel(float dst)
{
    float v = SmoothingRadius2 - dst * dst;
	return v * v * v * ViscosityScale;
}
float DensityToPressure(float density)
{
    return (density - TargetDensity) * PressureFactor;
}
float NearDensityToPressure(float density)
{
    return density * NearPressureFactor;
}

// GRID

uint GetCellIndex(vec3 Position)
{
    return CellIndexFromHash(GetCellHash(GetCellCoord(Position)));
}

ivec3 GetCellCoord(vec3 Position)
{
	vec3 normilizedPos = Position + WorldSize;
    
    float scaleF = 1.0f / SmoothingRadius*2.0f;
    return ivec3(floor(normilizedPos * scaleF));
}

uint GetCellHash(ivec3 Coords)
{	
	const uint PRIME1 = 0x9e3779b1;
    const uint PRIME2 = 0x85ebca6b;
    const uint PRIME3 = 0xc2b2ae35;

	return Coords.y * PRIME1 + Coords.x * PRIME2 + Coords.z * PRIME3;
}

uint CellIndexFromHash(uint Hash)
{
    return Hash % ParticleCount;
}