#version 430

layout(local_size_x = 1024) in;

struct Particle
{
    vec3 Position;
    vec3 PredictedPosition;
    vec3 Velocity;
    float Density;
};
struct SortedParticle
{
    uint CellHash;
    uint CellIndex;
    uint pIndex;
};

// BUFFERS
layout(std430, binding = 0) buffer ParticlesBuffer
{
	Particle Particles[];
};
layout(std430, binding = 1) buffer SortedParticlesBuffer
{
	SortedParticle SortedParticles[];
};
layout(std430, binding = 2) buffer StartIndicesBuffer
{
	uint StartIndices[];
};

uniform uint ParticleCount;

// world params
uniform vec3 WorldSize;
uniform mat4 BoundingBoxModel;
uniform vec3 RandomVector;

// particle params
uniform float ParticleMass;
uniform float ParticleRadius;
uniform float SmoothingRadius;
uniform float TargetDensity;
uniform float SimulationTimeStep;

// force params
uniform float PressureFactor;
uniform float ViscosityFactor;
uniform float CollisionDamping;

// kernel scales
uniform float DensityScale;
uniform float PressureScale;
uniform float ViscosityScale;



// forces
void CalcDensity(uint i);
vec3 CalcPressure(uint i);
vec3 CalcViscosity(uint i);
void ResolveCollisions(uint i);

// conversion helpers
float DensityToPressure(float density);

// kernels
float DensityKernel(float dst);
float PressureKernel(float dst);
float ViscosityKernel(float dst);

// grid helpers
ivec3 GetCellCoord(vec3 Position);
uint GetCellHash(ivec3 Coords);
uint CellIndexFromHash(uint Hash);


const uint GridLookupCount = 27;
const ivec3 GridOffsets[GridLookupCount] = ivec3[](
    ivec3(0, 0, 0),
    ivec3(1, 0, 0),
    ivec3(-1, 0, 0),
    ivec3(0, 1, 0),
    ivec3(0, -1, 0),
    ivec3(0, 0, 1),
    ivec3(0, 0, -1),
    ivec3(1, 1, 0),
    ivec3(1, -1, 0),
    ivec3(-1, 1, 0),
    ivec3(-1, -1, 0),
    ivec3(1, 0, 1),
    ivec3(1, 0, -1),
    ivec3(-1, 0, 1),
    ivec3(-1, 0, -1),
    ivec3(0, 1, 1),
    ivec3(0, 1, -1),
    ivec3(0, -1, 1),
    ivec3(0, -1, -1),
    ivec3(1, 1, 1),
    ivec3(1, 1, -1),
    ivec3(1, -1, 1),
    ivec3(1, -1, -1),
    ivec3(-1, 1, 1),
    ivec3(-1, 1, -1),
    ivec3(-1, -1, 1),
    ivec3(-1, -1, -1)
);

void main()
{
    uint i = gl_GlobalInvocationID.x;
    if ( i >= ParticleCount ) return;

    CalcDensity(i);

    barrier();

    vec3 viscosityForce = CalcViscosity(i);
    vec3 pressureForce = CalcPressure(i);


    Particles[i].Velocity += (viscosityForce + pressureForce) * SimulationTimeStep;
    
    Particles[i].Position += Particles[i].Velocity * SimulationTimeStep;

    ResolveCollisions(i);
};

void CalcDensity(uint i)
{
    float Density = 0.0f;

    vec3 myPosition = Particles[i].PredictedPosition;
    ivec3 myCell = GetCellCoord(myPosition);
    for ( uint gr = 0; gr < GridLookupCount; ++gr )
    {
        ivec3 lookupCell = myCell + GridOffsets[gr];
        uint CellHash = GetCellHash(lookupCell);
        uint CellIndex = CellIndexFromHash(CellHash);
        for ( uint lookupIndex = StartIndices[CellIndex]; lookupIndex < ParticleCount; ++lookupIndex )
        {
            if ( SortedParticles[lookupIndex].CellIndex != CellIndex )
                break;
            if ( SortedParticles[lookupIndex].CellHash != CellHash )
                continue;
            uint otherP = SortedParticles[lookupIndex].pIndex;

            // now we got all the indices
            vec3 otherPosition = Particles[otherP].PredictedPosition;
            vec3 offset = myPosition - otherPosition;
            float dst2 = dot(offset, offset);
            if ( dst2 > SmoothingRadius*SmoothingRadius ) continue;
            
            // now we have all the data

            Density += ParticleMass * DensityKernel(dst2);
        }
    }
    Particles[i].Density = Density;
}

vec3 CalcPressure(uint i)
{
    vec3 pressureForce = vec3(0.0f);

    float myDensity = Particles[i].Density;

    float myPressure = DensityToPressure(myDensity);

    vec3 myPosition = Particles[i].PredictedPosition;
    ivec3 myCell = GetCellCoord(myPosition);
    for ( uint gr = 0; gr < GridLookupCount; ++gr )
    {
        ivec3 lookupCell = myCell + GridOffsets[gr];
        uint CellHash = GetCellHash(lookupCell);
        uint CellIndex = CellIndexFromHash(CellHash);
        for ( uint lookupIndex = StartIndices[CellIndex]; lookupIndex < ParticleCount; ++lookupIndex )
        {
            if ( SortedParticles[lookupIndex].CellIndex != CellIndex )
                break;
            if ( SortedParticles[lookupIndex].CellHash != CellHash )
                continue;
            uint otherP = SortedParticles[lookupIndex].pIndex;
            if ( otherP == i ) continue;

            // now we got all the indices

            vec3 otherPosition = Particles[otherP].PredictedPosition;
            vec3 offset = myPosition - otherPosition;
            float dst2 = dot(offset,  offset);
            if ( dst2 > SmoothingRadius*SmoothingRadius ) continue;
            
            float dst = sqrt(dst2);
            // now we have all the data

            vec3 dir = dst != 0.0f ? offset / dst : RandomVector;

            float otherDensity = Particles[otherP].Density;

            float otherPressure = DensityToPressure(otherDensity);


            pressureForce += ((myPressure + otherPressure) / (2.0f * otherDensity)) * dir * PressureKernel(dst);
        }
    }
    return -pressureForce;
}

vec3 CalcViscosity(uint i)
{
    vec3 viscosityForce = vec3(0.0f);
    vec3 myVelocity = Particles[i].Velocity;
    float myDensity = Particles[i].Density;
    vec3 myPosition = Particles[i].PredictedPosition;

    ivec3 myCell = GetCellCoord(myPosition);
    for ( uint gr = 0; gr < GridLookupCount; ++gr )
    {
        ivec3 lookupCell = myCell + GridOffsets[gr];
        uint CellHash = GetCellHash(lookupCell);
        uint CellIndex = CellIndexFromHash(CellHash);
        for ( uint lookupIndex = StartIndices[CellIndex]; lookupIndex < ParticleCount; ++lookupIndex )
        {
            if ( SortedParticles[lookupIndex].CellIndex != CellIndex )
                break;
            if ( SortedParticles[lookupIndex].CellHash != CellHash )
                continue;
            uint otherP = SortedParticles[lookupIndex].pIndex;

            if ( otherP == i ) continue;

            // now we got all the indices
            vec3 otherPosition = Particles[otherP].PredictedPosition;
            float otherDensity = Particles[otherP].Density;
            vec3 offset = myPosition - otherPosition;
            float dst = length(offset);
            if ( dst > SmoothingRadius ) continue;
            
            vec3 dir = dst != 0.0f ? offset / dst : RandomVector;

            // now we have all the data

            vec3 otherVelocity = Particles[otherP].Velocity;
            viscosityForce += ((otherVelocity - myVelocity) / otherDensity) * ViscosityKernel(dst);
        }
    }
    return viscosityForce * ViscosityFactor;
}

void ResolveCollisions(uint i)
{

    vec4 localPoint = inverse(BoundingBoxModel) * vec4(Particles[i].Position, 1.0);


    bool bOutside = (  localPoint.x < -0.5 || localPoint.x > 0.5 ||
                        localPoint.y < -0.5 || localPoint.y > 0.5 ||
                        localPoint.z < -0.5 || localPoint.z > 0.5);

    if ( bOutside )
    {
        localPoint.x = clamp(localPoint.x, -0.5, 0.5);
        localPoint.y = clamp(localPoint.y, -0.5, 0.5);
        localPoint.z = clamp(localPoint.z, -0.5, 0.5);

        Particles[i].Position = vec3(BoundingBoxModel * localPoint);

        vec3 localCollisionNormal = vec3(0.0);
        if (localPoint.x <= -0.5) localCollisionNormal = vec3(-1.0, 0.0, 0.0);
        else if (localPoint.x >= 0.5) localCollisionNormal = vec3(1.0, 0.0, 0.0);
        else if (localPoint.y <= -0.5) localCollisionNormal = vec3(0.0, -1.0, 0.0);
        else if (localPoint.y >= 0.5) localCollisionNormal = vec3(0.0, 1.0, 0.0);
        else if (localPoint.z <= -0.5) localCollisionNormal = vec3(0.0, 0.0, -1.0);
        else if (localPoint.z >= 0.5) localCollisionNormal = vec3(0.0, 0.0, 1.0);
        
        vec3 worldNormal = normalize(vec3(BoundingBoxModel * vec4(localCollisionNormal, 0.0f)));
        vec3 reflectedVelocity = Particles[i].Velocity - (1.0f + CollisionDamping) * dot(Particles[i].Velocity, worldNormal) * worldNormal;
        
        Particles[i].Velocity = reflectedVelocity;
    }
}

//// HELPERS

float DensityKernel(float dst2)
{
    float v = SmoothingRadius*SmoothingRadius - dst2;
	return v * v * v * DensityScale;
}

float PressureKernel(float dst)
{
    float v = SmoothingRadius*SmoothingRadius - dst*dst;
	return v * v * v * PressureScale;
}
float ViscosityKernel(float dst)
{
    float v = SmoothingRadius - dst;
	return v * ViscosityScale;
}
float DensityToPressure(float density)
{
    return max((density - TargetDensity), 0.0f) * PressureFactor;
}

// GRID

ivec3 GetCellCoord(vec3 Position)
{
	vec3 normilizedPos = Position + WorldSize;
	int cellX = int(floor(normilizedPos.x / SmoothingRadius*2.0f));
    int cellY = int(floor(normilizedPos.y / SmoothingRadius*2.0f));
    int cellZ = int(floor(normilizedPos.z / SmoothingRadius*2.0f));
	return ivec3(cellX, cellY, cellZ);
}

uint GetCellHash(ivec3 Coords)
{	
	const uint PRIME1 = 0x9e3779b1;
    const uint PRIME2 = 0x85ebca6b;
    const uint PRIME3 = 0xc2b2ae35;

	return Coords.y * PRIME1 + Coords.x * PRIME2 + Coords.z * PRIME3;
}

uint CellIndexFromHash(uint Hash)
{
    return Hash % ParticleCount;
}