#version 430

layout(local_size_x = 256) in;

struct SortedCellIndex
{
    //uint CellHash;
    uint CellIndex;
    uint pIndex;
};
layout(std430, binding = 1) buffer SortedCellIndiciesBuffer
{
	SortedCellIndex SortedCellIndicies[];
};

layout(std430, binding = 2) buffer StartIndicesBuffer
{
	uint StartIndices[];
};

struct Particle
{
    vec3 Position;
    vec3 PredictedPosition;
    vec3 Velocity;
};
layout(std430, binding = 0) buffer ParticlesBuffer
{
	Particle Particles[];
};
layout(std430, binding = 5) buffer SortedParticlesBuffer
{
	Particle SortedParticles[];
};

uniform int ParticleCount;

void main()
{
    uint i = gl_GlobalInvocationID.x;
    if ( i >= ParticleCount ) return;

    uint cellIndex = SortedCellIndicies[i].CellIndex;
    uint prevCellIndex = i != 0 ? SortedCellIndicies[i-1].CellIndex : -1;
    if ( cellIndex != prevCellIndex )
    {
        StartIndices[cellIndex] = i;
    }
    SortedParticles[i] = Particles[SortedCellIndicies[i].pIndex];
    SortedCellIndicies[i].pIndex = i;
};