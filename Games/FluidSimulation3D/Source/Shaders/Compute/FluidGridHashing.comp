#version 430

layout(local_size_x = 256) in;

struct Particle
{
    vec3 Position;
    vec3 PredictedPosition;
    vec3 Velocity;
    float Density;
    float iDensity;
};
layout(std430, binding = 0) buffer ParticlesBuffer
{
	Particle Particles[];
};

struct SortedParticle
{
    //uint CellHash;
    uint CellIndex;
    uint pIndex;
};
layout(std430, binding = 1) buffer SortedParticlesBuffer
{
	SortedParticle SortedParticles[];
};

layout(std430, binding = 2) buffer StartIndicesBuffer
{
	uint StartIndices[];
};

uniform vec3 WorldSize;
uniform float SmoothingRadius;

uniform uint ParticleCount;


void PrepareHash(uint i);
ivec3 GetCellCoord(vec3 Position);
uint GetCellHash(ivec3 Coords);
uint CellIndexFromHash(uint Hash);

void main()
{
    uint i = gl_GlobalInvocationID.x;
    if ( i >= ParticleCount ) return;

    PrepareHash(i);
};

void PrepareHash(uint i)
{
    ivec3 CellCord = GetCellCoord(Particles[i].PredictedPosition);
    uint CellHash = GetCellHash(CellCord);
    SortedParticles[i].CellIndex = CellIndexFromHash(CellHash);
    SortedParticles[i].pIndex = i;
    StartIndices[i] = ParticleCount;
}

ivec3 GetCellCoord(vec3 Position)
{
	vec3 normilizedPos = Position + WorldSize;
	int cellX = int(floor(normilizedPos.x / SmoothingRadius*2.0f));
    int cellY = int(floor(normilizedPos.y / SmoothingRadius*2.0f));
    int cellZ = int(floor(normilizedPos.z / SmoothingRadius*2.0f));
	return ivec3(cellX, cellY, cellZ);
}

uint GetCellHash(ivec3 Coords)
{	
	const uint PRIME1 = 0x9e3779b1;
    const uint PRIME2 = 0x85ebca6b;
    const uint PRIME3 = 0xc2b2ae35;

	return Coords.y * PRIME1 + Coords.x * PRIME2 + Coords.z * PRIME3;
}

uint CellIndexFromHash(uint Hash)
{
    return Hash % ParticleCount;
}