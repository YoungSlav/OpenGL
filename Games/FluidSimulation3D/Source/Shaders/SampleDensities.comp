#version 430

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(r32f, binding = 0) uniform image3D outputTexture;

struct Particle
{
    vec3 Position;
    vec3 PredictedPosition;
    vec3 Velocity;
    float Density;
    float iDensity;
    float NearDensity;
    float iNearDensity;
};
struct SortedParticle
{
    uint CellIndex;
    uint pIndex;
};

// BUFFERS
layout(std430, binding = 0) buffer ParticlesBuffer
{
	Particle Particles[];
};
layout(std430, binding = 1) buffer SortedParticlesBuffer
{
	SortedParticle SortedParticles[];
};
layout(std430, binding = 2) buffer StartIndicesBuffer
{
	uint StartIndices[];
};

uniform float DensitiesResolution;
uniform vec3 BoundsSize;
uniform vec3 BoundsOrigin;

uniform mat4 BoundingBox;

uniform uint ParticleCount;

uniform float DensityScale;
uniform float ParticleMass;

uniform float SmoothingRadius;
uniform float SmoothingRadius2;

uniform float DensityMultiplier;


const uint GridLookupCount = 27;
const ivec3 GridOffsets[GridLookupCount] = ivec3[](
    ivec3(0, 0, 0),
    ivec3(1, 0, 0),
    ivec3(-1, 0, 0),
    ivec3(0, 1, 0),
    ivec3(0, -1, 0),
    ivec3(0, 0, 1),
    ivec3(0, 0, -1),
    ivec3(1, 1, 0),
    ivec3(1, -1, 0),
    ivec3(-1, 1, 0),
    ivec3(-1, -1, 0),
    ivec3(1, 0, 1),
    ivec3(1, 0, -1),
    ivec3(-1, 0, 1),
    ivec3(-1, 0, -1),
    ivec3(0, 1, 1),
    ivec3(0, 1, -1),
    ivec3(0, -1, 1),
    ivec3(0, -1, -1),
    ivec3(1, 1, 1),
    ivec3(1, 1, -1),
    ivec3(1, -1, 1),
    ivec3(1, -1, -1),
    ivec3(-1, 1, 1),
    ivec3(-1, 1, -1),
    ivec3(-1, -1, 1),
    ivec3(-1, -1, -1)
);


float CalcDensity(vec3 location);

// kernels
float DensityKernel(float dst);

// grid helpers
ivec3 GetCellCoord(vec3 Position);
uint GetCellHash(ivec3 Coords);
uint CellIndexFromHash(uint Hash);

void main()
{
    ivec3 pixelCoord = ivec3(gl_GlobalInvocationID.xyz);
    ivec3 iSize = imageSize(outputTexture);
    if (pixelCoord.x >= iSize.x || pixelCoord.y >= iSize.y || pixelCoord.z >= iSize.z)
    {
        return;  // Ignore out-of-bounds invocations
    }

    vec3 ndc = vec3(
        (1.0f * pixelCoord.x) / iSize.x - 0.5f,
        (1.0f * pixelCoord.y) / iSize.y - 0.5f,
        (1.0f * pixelCoord.z) / iSize.z - 0.5f
    );

    vec3 worldPosition = (BoundingBox * vec4(ndc, 0.0)).xyz;

    float Density = CalcDensity(worldPosition);


    imageStore(outputTexture, pixelCoord, vec4(Density));
};

float CalcDensity(vec3 location)
{
    float Density = 0.0f;
    ivec3 myCell = GetCellCoord(location);
    for ( uint gr = 0; gr < GridLookupCount; ++gr )
    {
        ivec3 lookupCell = myCell + GridOffsets[gr];
        uint CellHash = GetCellHash(lookupCell);
        uint CellIndex = CellIndexFromHash(CellHash);
        for ( uint lookupIndex = StartIndices[CellIndex]; lookupIndex < ParticleCount; ++lookupIndex )
        {
            if ( SortedParticles[lookupIndex].CellIndex != CellIndex )
                break;
            uint otherP = SortedParticles[lookupIndex].pIndex;

            // now we got all the indices
            vec3 otherPosition = Particles[otherP].Position;
            vec3 offset = location - otherPosition;
            float dst2 = dot(offset, offset);
            if ( dst2 > SmoothingRadius2 ) continue;
            
            // now we have all the data
            float dst = sqrt(dst2);

            Density += ParticleMass * DensityKernel(dst);
        }
    }
    return Density;
}

// kernels
float DensityKernel(float dst)
{
    float v = SmoothingRadius - dst;
	return v * v * DensityScale;
}

// GRID

ivec3 GetCellCoord(vec3 Position)
{
	vec3 normilizedPos = Position + BoundsSize;
    
    float scaleF = 1.0f / SmoothingRadius*2.0f;
    return ivec3(floor(normilizedPos * scaleF));
}

uint GetCellHash(ivec3 Coords)
{	
	const uint PRIME1 = 0x9e3779b1;
    const uint PRIME2 = 0x85ebca6b;
    const uint PRIME3 = 0xc2b2ae35;

	return Coords.y * PRIME1 + Coords.x * PRIME2 + Coords.z * PRIME3;
}

uint CellIndexFromHash(uint Hash)
{
    return Hash % ParticleCount;
}